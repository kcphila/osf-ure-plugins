import pytest
import os,sys,re
import pdb,warnings,traceback
import textwrap
import argparse

sys.path.insert(0, os.path.dirname(__file__) + '/..')
import ure

parser = argparse.ArgumentParser()
parser.add_argument('filename', help='The document to input')
parser.add_argument('--write-output', '-w', action='store_true', help='Output markdown to files in test-format')
args = parser.parse_args()


def print_rendered_markdown(test_file):
    """ Prints out the markdown generated by a file in the t/input directory

    This is used when writing new tests. It will print out the text as currently rendered, 
    which can be reified into a test easily.

    Remember to run pytest `t/test_ure_importer.py -s -vv`

    Args:
        test_file: the fileanme within the t/input folder that will get parsed.
        
    """


    print(f"Markdown for {test_file}")
    m = re.search(r'([^/]+)\.[^\/\.]+$', test_file)
    base_file = m.group(1)


    importer = ure.importer.from_file(test_file)
    md = importer.markdown

    iprj = 0
    for irpj, project in enumerate(md):
        print(f"\n\nNode Title: {project[0]}")

        for iwiki, (wiki_title, wiki_text,) in enumerate(project[1:]):
            print(f"\nWiki {iwiki}: {wiki_title}\n\n------BEGIN WIKI---------")
            print(wiki_text)
            print("------END WIKI---------\n")
            if args.write_output:
                with open(f't/md/{base_file}.{iprj}.{iwiki}.md', 'w') as fh:
                    if iwiki == 0:
                        fh.write(project[0] + "\n")
                    fh.write(wiki_title + "\n")
                    fh.write(wiki_text + "\n")
                        

try:
    print_rendered_markdown(args.filename)
except:
    errtype,errvalue,errtb = sys.exc_info()
    traceback.print_exc()
    pdb.post_mortem(errtb)

